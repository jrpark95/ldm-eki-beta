# 에이전트 작업 지시서 #4: 시각화 및 후처리 도구 보고서 작성

## 에이전트 역할
당신은 LDM-EKI 시스템의 시각화 및 후처리 도구를 분석하고 문서화하는 데이터 시각화 전문가입니다.

## 작업 목표
"시각화_후처리_도구_보고서.txt" 파일을 작성하여 모든 시각화, 분석, 디버깅 도구의 기능과 구현을 상세히 문서화합니다.

## ⚠️ 중요: 완전성 체크리스트
아래 모든 파일을 **반드시** 읽고 분석해야 합니다. 하나라도 빠뜨리면 안 됩니다.

### 필수 확인 파일 체크리스트
- [ ] util/cleanup.py (전체 코드)
- [ ] util/compare_all_receptors.py (전체 코드)
- [ ] util/detailed_postprocess.py (전체 코드)
- [ ] util/visualize_vtk.py (전체 코드)
- [ ] src/visualization/ldm_plot_vtk.cu (전체 코드)
- [ ] src/visualization/ldm_plot_vtk.cuh
- [ ] src/visualization/ldm_plot_utils.cu (전체 코드)
- [ ] src/visualization/ldm_plot_utils.cuh
- [ ] src/debug/memory_doctor.cu (전체 코드)
- [ ] src/debug/memory_doctor.cuh
- [ ] src/debug/kernel_error_collector.cu (전체 코드)
- [ ] src/debug/kernel_error_collector.cuh
- [ ] src/eki/eki_debug_logger.py (전체 코드)
- [ ] src/eki/memory_doctor.py (Python 버전)

## 조사해야 할 파일 목록 (상세)

### 1. Python 유틸리티 스크립트 (4개 파일 - 모두 읽기)
```bash
# 각 파일의 전체 내용을 읽어야 함
cat util/cleanup.py          # 10,664 bytes
cat util/compare_all_receptors.py  # 25,751 bytes
cat util/detailed_postprocess.py   # 17,897 bytes
cat util/visualize_vtk.py         # 22,613 bytes

# 함수별 분석
grep -n "^def " util/*.py
grep -n "^class " util/*.py

# import 분석 (의존성 파악)
grep "^import\|^from" util/*.py
```

### 2. C++ 시각화 모듈 (4개 파일)
```bash
# VTK 출력 관련
cat src/visualization/ldm_plot_vtk.cu   # ~287 줄
cat src/visualization/ldm_plot_vtk.cuh  # ~101 줄
cat src/visualization/ldm_plot_utils.cu # ~416 줄
cat src/visualization/ldm_plot_utils.cuh # ~203 줄

# 함수 목록
grep -n "void.*plot" src/visualization/*.cu
grep -n "saveVTK\|writeVTK" src/visualization/*.cu
```

### 3. 디버깅 도구 (6개 파일)
```bash
# C++ 디버깅 도구
cat src/debug/memory_doctor.cu  # ~263 줄
cat src/debug/memory_doctor.cuh # ~134 줄
cat src/debug/kernel_error_collector.cu  # ~162 줄
cat src/debug/kernel_error_collector.cuh # ~56 줄

# Python 디버깅 도구
cat src/eki/memory_doctor.py    # ~214 줄
cat src/eki/eki_debug_logger.py # ~117 줄
```

### 4. 로그 파일 및 출력물 분석
```bash
# 로그 파일 구조 파악
ls -la logs/
ls -la logs/debug/
ls -la logs/error/

# 출력 디렉토리 구조
ls -la output/
ls -la output/plot_vtk_prior/
ls -la output/plot_vtk_ens/
ls -la output/results/

# 샘플 로그 분석 (있다면)
head -100 logs/ldm_eki_simulation.log
head -100 logs/python_eki_output.log
```

### 5. 관련 설정 및 통합 지점
```bash
# 메인 실행 파일에서 시각화 호출
grep -n "visualize\|plot\|vtk" src/main_eki.cu
grep -n "cleanup\|compare\|postprocess" src/main_eki.cu

# 자동 실행 로직
grep -n "system(.*py)" src/main_eki.cu
grep -n "execvp\|fork" src/main_eki.cu
```

## 상세 분석 지침

### 1. cleanup.py 완전 분석 (약 400줄)
```python
# 주요 기능 분석
- ArgumentParser 설정
- 디렉토리별 정리 함수
  - clean_logs()
  - clean_output()
  - clean_shared_memory()
- 사용자 확인 로직
- dry-run 모드
- 통계 출력

# 코드 구조
if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    # 옵션 정의
    --dry-run
    --no-confirm
    --logs-only
    --output-only
    --shm-only

# 정리 대상
- logs/*.log
- output/plot_vtk_*/*.vtk
- output/results/*.png
- /dev/shm/ldm_eki_*
- /tmp/eki_debug/*
```

### 2. compare_all_receptors.py 완전 분석 (약 600줄)
```python
# 주요 함수 (모두 분석)
- load_eki_data_from_npz()
- plot_all_receptors_comparison()
- plot_emission_comparison()
- create_combined_figure()
- calculate_statistics()

# 시각화 기능
- 16개 수용체 동시 플롯
- 시간축 정렬
- Prior vs Posterior 비교
- 수렴 히스토리
- 통계 정보 오버레이

# 출력 파일
- output/results/all_receptors_comparison.png
- output/results/emission_estimation.png
- output/results/convergence_history.png
```

### 3. detailed_postprocess.py 완전 분석 (약 500줄)
```python
# 3가지 주요 기능
1. extract_debug_data()
   - NPZ 파일 언패킹
   - 배열 통계 계산
   - 텍스트 파일 생성

2. generate_individual_plots()
   - 수용체별 개별 그래프
   - 고해상도 PNG 생성
   - 커스터마이징 옵션

3. create_config_summary()
   - 모든 설정 파일 파싱
   - 핵심 파라미터 추출
   - Markdown 형식 요약

# 자동 실행 가이드
- 실행 방법 안내 메시지
- 생성될 파일 목록
- 예상 소요 시간
```

### 4. visualize_vtk.py 완전 분석 (약 700줄)
```python
# 주요 클래스와 함수
class VTKVisualizer:
    - __init__(mode, extent)
    - load_vtk_file()
    - create_heatmap()
    - plot_particle_distribution()
    - save_figure()
    - create_animation()

# 핵심 기능
- PyVista로 VTK 파일 읽기
- 입자 위치 추출 (x, y, z)
- 2D 히스토그램 생성 (400×400 bins)
- Gaussian smoothing (sigma 조절 가능)
- Cartopy 지도 오버레이
- GIF 애니메이션 생성

# 명령줄 옵션
--mode [prior|ensemble]
--start, --end, --step (프레임 선택)
--sigma (smoothing 강도)
--single (단일 파일 모드)
--extent (지도 범위 수동 설정)

# 자동화 기능
- VTK 디렉토리 자동 감지
- 최대 extent 자동 계산
- 정사각형 지도 영역 보장
```

### 5. C++ VTK 출력 모듈 분석 (약 400줄)
```cpp
// ldm_plot_vtk.cu 주요 함수
- LDM::saveVTKParticles()
  - 입자 위치 저장
  - 핵종 정보 저장
  - 앙상블 ID 저장

- LDM::saveVTKGrid()
  - 3D 그리드 농도장
  - 시간 스텝별 저장

// ldm_plot_utils.cu 주요 함수
- createVTKHeader()
- writeParticleData()
- writeGridData()
- formatTimestamp()
```

### 6. Memory Doctor 시스템 분석 (약 500줄)

#### C++ 버전 (memory_doctor.cu/cuh)
```cpp
class MemoryDoctor {
public:
    static void logSentData();
    static void logReceivedData();
    static void setEnabled(bool);
    static void generateReport();
private:
    static void calculateChecksum();
    static void writeToFile();
};
```

#### Python 버전 (memory_doctor.py)
```python
class MemoryDoctor:
    def log_received_data(tag, data, iteration)
    def log_sent_data(tag, data, iteration)
    def calculate_checksum(data)
    def clean_log_directory()
    def generate_comparison_report()
```

### 7. Kernel Error Collector 분석 (약 300줄)
```cpp
// 매크로 정의
#define CHECK_KERNEL_ERROR() \
    KernelErrorCollector::checkAndCollect(__FILE__, __LINE__)

// 주요 함수
class KernelErrorCollector {
    static void enableCollection();
    static void disableCollection();
    static void checkAndCollect(file, line);
    static void reportAllErrors();
    static void saveToLogFile();
};

// 에러 구조체
struct KernelError {
    std::string message;
    std::string file;
    int line;
    int count;
};
```

### 8. EKI Debug Logger 분석 (약 200줄)
```python
# eki_debug_logger.py
class EKIDebugLogger:
    def __init__(self):
        self.data_buffer = {}

    def log_iteration(self, iteration, data_dict):
        """각 반복마다 호출"""

    def log_ensemble_state(self, X):
        """앙상블 상태 로깅"""

    def log_observations(self, HX):
        """관측값 로깅"""

    def save_to_npz(self, filename):
        """압축 저장"""

# 저장 형식
eki_debug_data.npz:
    - iterations: [1, 2, 3, ...]
    - ensemble_states: (n_iter, n_state, n_ensemble)
    - observations: (n_iter, n_obs, n_ensemble)
    - convergence_metrics: (n_iter,)
```

## 보고서 작성 구조

### 1. 개요 (약 150줄)
- 후처리 도구의 목적과 중요성
- 도구별 역할 분류
- 워크플로우 다이어그램

### 2. 데이터 정리 도구 (약 400줄)
#### 2.1 cleanup.py 상세
- 전체 코드 분석
- 각 함수별 동작 설명
- 사용 예시와 옵션
- 안전장치 (확인 프롬프트, dry-run)

### 3. 결과 시각화 도구 (약 800줄)
#### 3.1 compare_all_receptors.py
- 전체 코드 구조
- 16개 서브플롯 생성 로직
- 시간축 정렬 알고리즘
- 통계 계산 및 표시

#### 3.2 visualize_vtk.py
- PyVista 통합
- Cartopy 지도 렌더링
- 히트맵 생성 알고리즘
- GIF 애니메이션 생성

#### 3.3 C++ VTK 출력
- VTK 파일 형식
- 입자 데이터 구조
- 메타데이터 저장

### 4. 상세 분석 도구 (약 500줄)
#### 4.1 detailed_postprocess.py
- NPZ 데이터 추출
- 통계 분석 기능
- 개별 플롯 생성
- 설정 요약 생성

### 5. 디버깅 도구 (약 600줄)
#### 5.1 Memory Doctor
- C++ 구현
- Python 구현
- 데이터 검증 메커니즘
- 체크섬 알고리즘

#### 5.2 Kernel Error Collector
- 에러 수집 메커니즘
- 중복 제거 로직
- 보고서 생성
- 로그 파일 형식

#### 5.3 EKI Debug Logger
- 반복별 데이터 수집
- NPZ 압축 저장
- 메모리 효율성

### 6. 통합 및 자동화 (약 300줄)
- main_eki.cu에서의 호출
- 자동 실행 체인
- 파이프라인 구성
- 에러 처리

### 7. 출력물 및 파일 형식 (약 250줄)
- PNG 그래프 사양
- VTK 파일 구조
- NPZ 아카이브 형식
- 로그 파일 형식
- 디렉토리 구조

### 8. 사용 가이드 및 예제 (약 200줄)
- 전체 워크플로우 예시
- 각 도구별 사용법
- 커스터마이징 방법
- 트러블슈팅

### 9. 성능 및 최적화 (약 150줄)
- 대용량 데이터 처리
- 메모리 사용 최적화
- 병렬 처리 가능성
- 캐싱 전략

## 코드 완전성 확인 방법

### 반드시 수행해야 할 확인 작업
```bash
# 1. 모든 Python 파일 전체 읽기
for file in util/*.py src/eki/*debug*.py src/eki/memory_doctor.py; do
    echo "=== Reading $file ==="
    cat $file
done

# 2. 모든 C++ 시각화/디버그 파일 읽기
for file in src/visualization/*.cu src/visualization/*.cuh \
           src/debug/*.cu src/debug/*.cuh; do
    echo "=== Reading $file ==="
    cat $file
done

# 3. 함수 목록 추출 및 확인
echo "Python functions:"
grep -h "^def " util/*.py src/eki/*debug*.py | sort | uniq

echo "C++ functions:"
grep -h "void\|bool\|int" src/visualization/*.cu src/debug/*.cu | \
    grep -v "//" | grep "("

# 4. Import/include 의존성 확인
echo "Python dependencies:"
grep -h "^import\|^from" util/*.py | sort | uniq

echo "C++ dependencies:"
grep -h "^#include" src/visualization/*.cu src/debug/*.cu | sort | uniq
```

## 작성 시 주의사항

1. **모든 코드 포함**
   - 함수 시그니처
   - 주요 알고리즘
   - 에러 처리 로직
   - 주석 내용

2. **실행 예제 제공**
   - 명령줄 전체
   - 예상 출력
   - 생성 파일

3. **시각적 설명**
   - 플로우차트
   - 스크린샷 설명
   - 파일 구조도

4. **연결성 설명**
   - 도구 간 데이터 흐름
   - 의존성 관계
   - 실행 순서

## 최종 체크리스트
작성 완료 후 다음 항목을 모두 확인하세요:
- [ ] util/ 폴더의 4개 .py 파일 모두 분석
- [ ] src/visualization/ 폴더의 4개 파일 모두 분석
- [ ] src/debug/ 폴더의 4개 파일 모두 분석
- [ ] src/eki/의 디버그 관련 2개 파일 분석
- [ ] 모든 함수가 문서화됨
- [ ] 실행 예제 포함
- [ ] 출력물 형식 설명
- [ ] 파일 간 연결 관계 명시

## 최종 산출물
- 파일명: `/home/jrpark/ldm-eki-release.v.beta/docs/시각화_후처리_도구_보고서.txt`
- 예상 분량: 3,000줄 이상
- 언어: 한국어
- 형식: 기술 매뉴얼 (코드 포함, 실행 예제, 출력 샘플)